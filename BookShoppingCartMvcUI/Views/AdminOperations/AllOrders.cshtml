@model IEnumerable<Order>
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "AllOrders";
}

@{
    var orderStatusTranslations = new Dictionary<int, string>
    {
        { 1, "Chờ giao hàng" },
        { 2, "Đang giao hàng" },
        { 3, "Đã giao thành công" },
        { 4, "Chưa giao thành công" },
        { 5, "Đã trả lại" },
        { 6, "Shiper đưa tiền cửa hàng" }
    };
}

<div class="container mt-4">
    <h4 class="mb-4">Quản lý đơn hàng</h4>
    @if (Model != null && Model.Any())
    {
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th class="col-date">Ngày đặt</th>
                    <th class="col-name">Tên</th>
                    <th class="d-none d-md-table-cell col-email">Email</th> <!-- Cột email được ẩn trên các màn hình nhỏ -->
                    <th class="col-phone">Số điện thoại</th>
                    <th class="col-address">Địa chỉ</th>
                    <th class="col-payment">Tình trạng thanh toán</th>
                    <th class="col-status">Trạng thái đơn hàng</th>
                    <th class="col-actions">Hành động</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model)
                {
                    <tr>
                        <td>@order.CreateDate.ToString("dd-MM-yyyy")</td>
                        <td>@order.Name</td>
                        <td class="d-none d-md-table-cell">@order.Email</td>
                        <td>@order.MobileNumber</td>
                        <td>@order.Address</td>
                        <td>@(order.IsPaid ? "Đã trả tiền" : "Chưa trả tiền")</td>
                        <td>
                            @{
                                var statusName = orderStatusTranslations.ContainsKey(order.OrderStatus.StatusId)
                                    ? orderStatusTranslations[order.OrderStatus.StatusId]
                                    : order.OrderStatus.StatusName;
                            }
                            @statusName
                        </td>
                        <td>
                            <button type="button" data-bs-toggle="modal" data-bs-target="#modal-@order.Id" class="btn btn-action btn-primary">
                                Chi tiết đơn hàng
                            </button>
                            <a asp-action="PrintInvoice" asp-route-orderId="@order.Id" class="btn btn-action btn-success">In hóa đơn</a>
                            <a asp-action="UpdateOrderStatus" asp-route-orderId="@order.Id" class="btn btn-action btn-info">Thay đổi trạng thái đơn hàng</a>

                            @if (!order.IsPaid && order.OrderStatus.StatusName == "Returned")
                            {
                                <a asp-action="TogglePaymentStatus" asp-route-orderId="@order.Id" class="btn btn-action btn-danger">Cập nhật trạng thái thanh toán</a>
                            }
                            else
                            {
                                <a class="btn btn-action btn-danger disabled">
                                    @if (order.IsPaid)
                                    {
                                        @:Đã trả tiền
                                    }
                                    else
                                    {
                                        @:Cập nhật trạng thái thanh toán
                                    }
                                </a>
                            }

                            @await Html.PartialAsync("/Views/AdminOperations/_OrderDetailModal.cshtml", new OrderDetailModalDTO { DivId = order.Id.ToString(), OrderDetail = order.OrderDetail })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <h5>Không có đơn hàng</h5>
    }
</div>

<style>
    .table {
        width: 100%;
        border-collapse: collapse;
    }
    .table th, .table td {
        padding: 10px;
        text-align: left;
    }
    .table th {
        background-color: #f8f9fa;
        font-weight: bold;
    }
    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f9f9f9;
    }
    .thead-dark th {
        background-color: #343a40;
        color: #fff;
    }
    .btn-action {
        font-size: 0.875rem;
        padding: 0.5rem 1rem;
        line-height: 1.5;
        border-radius: 0.375rem;
        margin-right: 5px;
        margin-bottom: 5px;
    }
    .btn-primary {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
    .btn-success {
        background-color: #198754;
        border-color: #198754;
    }
    .btn-info {
        background-color: #0dcaf0;
        border-color: #0dcaf0;
    }
    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }
    .btn-danger.disabled {
        pointer-events: none;
        opacity: 0.65;
    }
    .container {
        padding: 15px;
    }
    .mb-4 {
        margin-bottom: 1.5rem;
    }
    /* Cân chỉnh độ rộng cột */
    .col-date, .col-name, .col-phone, .col-address, .col-payment, .col-status, .col-actions {
        width: 12.5%; /* Điều chỉnh giá trị này để cân chỉnh độ rộng của các cột */
    }

    /* Cột email chỉ hiển thị trên các màn hình lớn */
    .d-none {
        display: none !important;
    }
    
</style>
